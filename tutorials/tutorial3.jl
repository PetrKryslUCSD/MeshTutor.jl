# # Searching a mesh

# In this tutorial, we will learn
# 
#    -  How to import an incidence relation from a file.
#    -  How to create a mesh from this incidence relation.
#    -  How to export mesh for visualization.

# First  we will use a `MeshPorter` function to import a NASTRAN mesh file.
# This file stores a tetrahedral mesh of a hollow cylinder.
import MeshPorter: import_NASTRAN
connectivities = import_NASTRAN("trunc_cyl_shell_0.nas");

# The result, `connectivities`, is an an array of incidence relations (in this
# case there is just one entry in this array). We can create a mesh
# from this incidence relation as
import MeshKeeper: Mesh, insert!
mesh = Mesh()
insert!(mesh, connectivities[1]);

# The imported mesh can be exported again, this time in a different format,
# suitable for visualization. The tetrahedral elements are the base incidence
# relation of the mesh.
import MeshKeeper: baseincrel
import MeshPorter: vtkwrite
vtkwrite("trunc_cyl_shell_0-elements", baseincrel(mesh))

# Start "Paraview", load the file `"trunc_cyl_shell_0-elements.vtu"` and
# select for instance view as "Surface with Edges". The result will be a view
# of the surface of the tetrahedral mesh.
@async run(`paraview trunc_cyl_shell_0-elements.vtu`)

selectedv = vselect(mesh, box = boundingbox([-Inf -Inf 0.5; Inf Inf 0.5]), inflate = 0.001)
# vtkwrite("trunc_cyl_shell_0-selected-vertices", selectedv)
@test nshapes(selectedv.left) == 44

# The mesh will be generated by the package `MeshMaker`. We choose an
# orientation of the diagonals (in other words the pattern in which the block is
# tiled) as labeled `:b`.
import MeshMaker: T3block
conn = T3block(a, b, na, nb, :b)

# The variable `conn` is an incidence relation. This will become the base
# relation of the mesh.
import MeshKeeper: Mesh, insert!
m = Mesh()
insert!(m, conn)

# The embedding space in which the mesh lives is two-dimensional. We can verify that by
import MeshKeeper: nspacedims
@show nspacedims(m)

# We can export the mesh into a set of files that are referred to as the MESH format.
# This will actually store the mesh as three separate files. The file
# `"Unit-square-mesh.mesh"` is the directory of the bundle of the mesh files, so to speak.
import MeshKeeper: save
save(m, "Unit-square-mesh")

# We will now load the mesh into another mesh that we create specifically for
# the purpose of comparing the two meshes.
import MeshKeeper: load
m2 = load(Mesh(), "Unit-square-mesh")

# Now we compare the number of  elements  stored in those two meshes. First the
# vertices (those are the shapes on the right of the incidence relation).
import MeshCore: nshapes
import MeshKeeper: baseincrel
@show nshapes(baseincrel(m).right) == nshapes(baseincrel(m2).right)

# Now  we compare the number of the triangular elements in those two meshes:
@show nshapes(baseincrel(m).left) == nshapes(baseincrel(m2).left)

# Are the shape descriptors the same?
import MeshCore: shapedesc
@show shapedesc(baseincrel(m).left).name
@show shapedesc(baseincrel(m).left) == shapedesc(baseincrel(m2).left)


