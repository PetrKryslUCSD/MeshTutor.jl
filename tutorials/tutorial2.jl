# # Saving and loading a mesh

# In this tutorial, we will learn
# 
#    -  How to save the mesh to a file.
#    -  How to load a mesh from a file.
#    -  How to find out the number of elements and their type.


# We will generate the triangular mesh inside a rectangular block.
# The block will have the dimensions shown below:
a, b = 1.0, 1.0
# The triangles will be generated in a regular pattern, with the number of
# edges per side of the block given as
na, nb = 2, 3

# The mesh will be generated by the package `MeshMaker`. We choose an
# orientation of the diagonals (in other words the pattern in which the block is
# tiled) as labeled `:b`.
import MeshMaker: T3block
conn = T3block(a, b, na, nb, :b)

# The variable `conn` is an incidence relation. This will become the base
# relation of the mesh.
import MeshKeeper: Mesh, insert!
m = Mesh()
insert!(m, conn)

# The embedding space in which the mesh lives is two-dimensional. We can verify that by
import MeshKeeper: nspacedims
@show nspacedims(m)

# We can export the mesh into a set of files that are referred to as the MESH format.
# This will actually store the mesh as three separate files. The file
# `"Unit-square-mesh.mesh"` is the directory of the bundle of the mesh files, so to speak.
import MeshKeeper: save
save(m, "Unit-square-mesh")

# We will now load the mesh into another mesh that we create specifically for
# the purpose of comparing the two meshes.
import MeshKeeper: load
m2 = load(Mesh(), "Unit-square-mesh")

# Now we compare the number of  elements  stored in those two meshes. First the
# vertices (those are the shapes on the right of the incidence relation).
import MeshCore: nshapes
import MeshKeeper: baseincrel
@show nshapes(baseincrel(m).right) == nshapes(baseincrel(m2).right)

# Now  we compare the number of the triangular elements in those two meshes:
@show nshapes(baseincrel(m).left) == nshapes(baseincrel(m2).left)

# Are the shape descriptors the same?
import MeshCore: shapedesc
@show shapedesc(baseincrel(m).left).name
@show shapedesc(baseincrel(m).left) == shapedesc(baseincrel(m2).left)


